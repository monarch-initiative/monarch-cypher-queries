cypherResources:

    ## Homologs from gene
    - path: /dynamic/genes/{gene_id}/homologs
      query: |
              MATCH (gene:Node{iri:'${gene_id}'})-[e:equivalentClass*0..2]-(ge:gene)-[homology:${homolog_id}!]-(homolog)
              RETURN distinct gene, e, ge, homology, homolog
      operations:
        - summary: Get homologs for a gene
          parameters:
            - name: gene_id
              description: The ID of the gene # NCBIGene:6469
              paramType: path
            - name: homolog_id
              description: The homolog relationship # RO:HOM0000017
              paramType: query

    ##################
    ### GO Taxon
    ##################

    ## Violation service
    - path: /dynamic/taxon-check/{taxonomy_class}/{ontology_class}
      query: |
              START start = node:node_auto_index(iri={taxonomy_class}),
              end = node:node_auto_index(iri={ontology_class})
              OPTIONAL MATCH path = (start)-[:${relation_set}]->()-[:`http://purl.obolibrary.org/obo/RO_0002160`*1]->(subclass)-[:subClassOf*0..]->(end)
              WITH start, end, path
              LIMIT 1
              OPTIONAL MATCH path2 = (start)-[:${relation_set}]->()-[:`http://purl.obolibrary.org/obo/RO_0002161`*1]->()<-[:subClassOf*0..]-(end)
              WITH path, path2
              LIMIT 1
              RETURN (path IS NULL) OR (path2 IS NOT NULL) as result
      operations:
        - summary: Is taxon invalid for ontology class
          parameters:
            - name: taxonomy_class
              description: The taxonomy class to test
              paramType: path
            - name: ontology_class
              description: The ontology class to test
              paramType: path
            - name: relation_set
              description: The relation set to traverse
              paramType: query


    ##################
    ### Graph Algorithms
    ##################

    ## Get the shortest path between two IDs
    - path: /dynamic/shortest
      query: |
              MATCH (start:Node{iri:'${start_id}'})-[:equivalentClass|sameAs*0..1]-(startLeader:cliqueLeader) 
              WITH startLeader
              MATCH (end:Node{iri:'${end_id}'})-[:equivalentClass|sameAs*0..1]-(endLeader:cliqueLeader)
              WITH startLeader, endLeader
              MATCH path = shortestPath((startLeader)-[:${relationship}*..${max_depth}]->(endLeader))
              RETURN path
      operations:
        - summary: Get the shortest path between two IDs
          parameters:
            - name: start_id
              description: The starting node (ex HP:0011014)
              paramType: query
            - name: end_id
              description: The ending node (ex HP:0000118)
              paramType: query
            - name: max_depth
              description: the maximum depth to traverse
              paramType: query
            - name: relationship
              description: The property to traverse (ex subClassOf or subClassOf|partOf|isA)
              paramType: query
              required: false

    ##################
    ### Clique merge
    ##################

    ## CliqueLeader service
    - path: /dynamic/cliqueLeader/{id}
      query: |
              MATCH (start:Node{iri:'${id}'})-[:equivalentClass|sameAs*0..1]-(leader:cliqueLeader)
              RETURN leader
      operations:
        - summary: Returns the clique leader.
          parameters:
            - name: id
              description: The node to start from.
              paramType: path

    ## Clique service
    - path: /dynamic/clique/{id}
      query: |
              MATCH path = (start:Node{iri:'${id}'})-[:equivalentClass|sameAs*]-(eq:Node)
              RETURN path
      operations:
        - summary: Returns the id and all its equivalents
          parameters:
            - name: id
              description: Curie formatted identifier
              paramType: path

    ## Candidate Clique Service
    - path: /dynamic/candidateClique/{id}
      query: |
              MATCH path = (start:Node{iri:'${id}'})-[:equivalentClass|sameAs|OIO:hasDbXref*]-(eq:Node)
              RETURN path
      operations:
        - summary: Returns ids that are equivalent and potentially equivalent (xrefs)
          parameters:
            - name: id
              description: Curie formatted identifier
              paramType: path
              
    ## Return all ontology nodes
    - path: /dynamic/ontologies
      query: |
              MATCH path = (:Ontology)
              RETURN path
      operations:
        - summary: Returns all nodes typed as an ontology
        
    ## Get dataset info
    - path: /dynamic/datasets
      query: |
              MATCH path = (:dataset)-[]->()
              RETURN path
      operations:
        - summary: Returns all dataset nodes and outgoing neighbors
